/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/gameRewards.js":
/*!****************************!*\
  !*** ./src/gameRewards.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   gameRewards: () => (/* binding */ gameRewards)\n/* harmony export */ });\n// Create a single instance for rewards.\r\nconst gameRewards = (function gameRewardsControl() {\r\n\r\n    // Reward scaler constant.\r\n    const REWARD_WEIGHT_SCALER = 10;\r\n\r\n    // Reward tiers\r\n    const symbolCategories = {\r\n        bigWins: ['7', 'üíé', 'üí∞'],  // High value symbols for big wins\r\n        mediumWins: ['üé∞', 'üîî', '‚≠ê'],  // Slot machine (wild) and other medium value symbols\r\n        smallWins: ['üçí', 'üçã', 'üçä', 'üçâ']  // Fruit symbols for small wins\r\n    };\r\n\r\n    // Reward Multipliers\r\n    const symbolWeights = {\r\n        bigWins: [10, 9, 8], // High value weights\r\n        mediumWins: [7, 6, 5], // Medium value weights\r\n        smallWins: [4, 3, 2, 1], // Small value weights\r\n    };\r\n\r\n    // const symbolToCategoryMap = Object.entries(symbolCategories).reduce((map, [category, symbols]) => {\r\n    //     symbols.forEach(symbol => {\r\n    //         map[symbol] = category;\r\n    //     });\r\n    //     return map;\r\n    // }, {});\r\n\r\n    const symbolToCategoryMap = {\r\n        \"7\": \"bigWins\",\r\n        \"üíé\": \"bigWins\",\r\n        \"üí∞\": \"bigWins\",\r\n        \"üé∞\": \"mediumWins\",\r\n        \"üîî\": \"mediumWins\",\r\n        \"‚≠ê\": \"mediumWins\",\r\n        \"üçí\": \"smallWins\",\r\n        \"üçã\": \"smallWins\",\r\n        \"üçä\": \"smallWins\",\r\n        \"üçâ\": \"smallWins\", \r\n    };\r\n\r\n    // Count the occurences of each symbol.\r\n    const countSymbolOccurrences = (results) => {\r\n        const resultsMap = new Map();\r\n        for (const symbol of results) {\r\n            resultsMap.set(symbol, (resultsMap.get(symbol) || 0) + 1);\r\n        }\r\n        return resultsMap;\r\n    };\r\n\r\n    // Check presence of wild symbol.\r\n    const checkForWildSymbol = (resultsMap) => {\r\n        let wildSymbol = symbolCategories.mediumWins[0];\r\n        if (resultsMap.has(wildSymbol)) {\r\n            if (resultsMap.get(wildSymbol) === 1) {\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n        return false;\r\n    };    \r\n\r\n    // Replace wild symbol before evaluation.\r\n    const replaceWildSymbol = (resultsMap) => {\r\n        let wildSymbol = symbolCategories.mediumWins[0];\r\n        resultsMap.delete(wildSymbol); // Safe because `checkForWildSymbol` ensures existence\r\n        resultsMap.set(substituteWildSymbol(), 1);\r\n        return resultsMap;\r\n    };    \r\n\r\n    // Get a replacement for wild symbol\r\n    const substituteWildSymbol = () => {\r\n        const gameSymbols = ['üçí', 'üçã', 'üçä', 'üçâ', 'üé∞', 'üíé', 'üí∞', 'üîî', '‚≠ê', '7'];\r\n        const symbolPool = new Set();\r\n    \r\n        // Randomly populate a unique symbol pool\r\n        while (symbolPool.size < 10) {\r\n            const randomIndex = Math.floor(Math.random() * gameSymbols.length);\r\n            symbolPool.add(gameSymbols[randomIndex]);\r\n        }\r\n    \r\n        const poolArray = Array.from(symbolPool); // Convert Set to Array\r\n        const randomSymbol = poolArray[Math.floor(Math.random() * poolArray.length)]; // Pick a random symbol\r\n        return randomSymbol; // Return the substitutional symbol\r\n    };\r\n\r\n    const matchCategorizer = (resultsMap) => {\r\n        if (!(resultsMap instanceof Map)) {\r\n            throw new Error('Invalid input: resultsMap must be a Map');\r\n        }\r\n    \r\n        let matchCategory = null;\r\n        let resultsMapSize = resultsMap.size;\r\n    \r\n        switch (resultsMapSize) {\r\n            case 3:\r\n                matchCategory = 'No matching symbols';\r\n                break;\r\n            case 2:\r\n                matchCategory = '2 Matching symbols';\r\n                break;\r\n            case 1:\r\n                matchCategory = '3 Matching symbols';\r\n                break;\r\n            default:\r\n                matchCategory = 'Unknown category'; // Log or handle unexpected sizes explicitly\r\n        }\r\n    \r\n        return matchCategory;\r\n    };    \r\n\r\n    // Function to get the payout initiator key based on conditions\r\n    const getPayoutInitiatorKey = (resultsMap, searchValue = null) => {\r\n        for (let [key, value] of resultsMap) {\r\n            // Check for exact match\r\n            if (searchValue !== null && value === searchValue) {\r\n                return key;\r\n            }\r\n        }\r\n        \r\n        // Check for the first high-value symbol in bigWins category\r\n        for (let [key] of resultsMap) {\r\n            if (symbolCategories.bigWins.includes(key)) {\r\n                return key;\r\n            }\r\n        }\r\n\r\n        // Return null if no matching key is found\r\n        return null;\r\n    };\r\n\r\n    // Balance probability with payout\r\n    const payoutProbabilityBalancer = (resultsMap, matchCategory) => {\r\n        let payoutMultiplier = 0; // Default to no payout\r\n        let payoutInitiatorKey = null;\r\n\r\n        // Exit at early stages with defaults if no matching symbols present.\r\n        if (matchCategory === 'No matching symbols') return { payoutMultiplier, payoutInitiatorKey };\r\n        \r\n        // Assign multiplier and find initiator key based on match category\r\n        switch (matchCategory) {\r\n            case '3 Matching symbols':\r\n                payoutMultiplier = 1000; // Perfect Match: Bet√ó1000\r\n                payoutInitiatorKey = getPayoutInitiatorKey(resultsMap, 3);\r\n                break;\r\n\r\n            case '2 Matching symbols':\r\n                payoutMultiplier = 10; // Two Matching: Bet√ó10\r\n                payoutInitiatorKey = getPayoutInitiatorKey(resultsMap, 2);\r\n                break;\r\n\r\n            case 'No matching symbols':\r\n                payoutMultiplier = 2; // Special Single Match: Bet√ó2\r\n                payoutInitiatorKey = getPayoutInitiatorKey(resultsMap);\r\n                break;\r\n\r\n            default:\r\n                console.error(`Unknown match category: ${matchCategory}`);\r\n        }\r\n\r\n        return { payoutMultiplier, payoutInitiatorKey };\r\n    };\r\n\r\n    const getPayoutWeightingValue = (payoutInitiatorKey) => {\r\n        let payoutWeight = 0;\r\n    \r\n        // Determine the category group for the symbol\r\n        let paymentCategoryGroup = symbolToCategoryMap[payoutInitiatorKey];\r\n    \r\n        // Find the index of the symbol in the category group\r\n        let rewardSymbolIndex = symbolCategories[paymentCategoryGroup].indexOf(payoutInitiatorKey);\r\n    \r\n        // Retrieve the corresponding payout weight\r\n        payoutWeight = symbolWeights[paymentCategoryGroup][rewardSymbolIndex];\r\n    \r\n        return payoutWeight;\r\n    };       \r\n\r\n    // Reward assignments\r\n    const rewardAssignment = (results, betAmount) => {\r\n        console.log(\"Results:\", results);\r\n    \r\n        // Count occurrences of each symbol\r\n        let symbolOccurrences = countSymbolOccurrences(results);\r\n        console.log(\"Symbol Occurrences:\", symbolOccurrences);\r\n    \r\n        // Check and handle wild symbols\r\n        let wildSymbolPresence = checkForWildSymbol(symbolOccurrences);\r\n        console.log(\"Wild Symbol Presence:\", wildSymbolPresence);\r\n    \r\n        if (wildSymbolPresence) {\r\n            symbolOccurrences = replaceWildSymbol(symbolOccurrences); // Replace wild symbols in occurrences\r\n            console.log(\"Symbol Occurrences after Wild Replacement:\", symbolOccurrences);\r\n        }\r\n    \r\n        // Categorize match type\r\n        let matchCategory = matchCategorizer(symbolOccurrences);\r\n        console.log(\"Match Category:\", matchCategory);\r\n    \r\n        // Get payout details\r\n        let { payoutMultiplier, payoutInitiatorKey } = payoutProbabilityBalancer(symbolOccurrences, matchCategory);\r\n        console.log(\"Payout Multiplier:\", payoutMultiplier);\r\n        console.log(\"Payout Initiator Key:\", payoutInitiatorKey);\r\n    \r\n        // Return zero rewards if no valid payout\r\n        if (!payoutInitiatorKey || payoutMultiplier === 0) {\r\n            console.log(\"No valid payout.\");\r\n            return 0;\r\n        }\r\n    \r\n        // Determine payout weight and calculate final reward\r\n        let payoutWeightValue = getPayoutWeightingValue(payoutInitiatorKey);\r\n        console.log(\"Payout Weight Value:\", payoutWeightValue);\r\n    \r\n        // Reward calculation\r\n        let finalReward = betAmount * payoutMultiplier * (payoutWeightValue / REWARD_WEIGHT_SCALER);\r\n        console.log(`Reward Assigned: ${finalReward}`);\r\n        let winnings = betAmount + finalReward;\r\n        console.log(`Bet payouts: ${winnings}`)\r\n        return winnings ;\r\n    };    \r\n\r\n    // Add bonus features\r\n    // Wild symbol (one that can subsititute for another increase winning chanves)\r\n    // Jacpot 777\r\n\r\n    // Progressive elements \r\n    // Bet size influence (optionally give wild symbol for large bets)\r\n    // Cumulative rewards: progressive cumulative Jackpot\r\n\r\n    // Player history and tracking\r\n    // Use local storage for development\r\n    // Transition to DB once application is ready.\r\n\r\n    return { rewardAssignment };\r\n})();\r\n\r\n// Generate random bet amounts and random symbols for testing\r\nconst generateRandomTests = (numTests) => {\r\n    const possibleSymbols = ['üçí', 'üçã', 'üçä', 'üçâ', 'üé∞', 'üíé', 'üí∞', 'üîî', '‚≠ê', '7'];\r\n    const tests = [];\r\n\r\n    for (let i = 0; i < numTests; i++) {\r\n        // Generate a random bet amount between 10 and 1000\r\n        const betAmount = Math.floor(Math.random() * 991) + 10;\r\n\r\n        // Generate a random result array of 3 symbols\r\n        const results = Array.from({ length: 3 }, () => {\r\n            return possibleSymbols[Math.floor(Math.random() * possibleSymbols.length)];\r\n        });\r\n\r\n        tests.push({ betAmount, results });\r\n    }\r\n\r\n    return tests;\r\n};\r\n\r\n// Test gameRewards.rewardAssignment with 15 random cases\r\nconst randomTests = generateRandomTests(15);\r\n\r\nrandomTests.forEach(({ betAmount, results }, index) => {\r\n    console.log(`Test ${index + 1}:`);\r\n    console.log(`Bet Amount: ${betAmount}`);\r\n    console.log(`Results: ${results}`);\r\n    const winnings = gameRewards.rewardAssignment(results, betAmount);\r\n    console.log(`Winnings: ${winnings}`);\r\n    console.log('-----------------------------------');\r\n});\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/gameRewards.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/gameRewards.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;